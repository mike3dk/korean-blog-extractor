name: Daily Site Validation

on:
  schedule:
    # Runs daily at midnight PST (08:00 UTC)
    - cron: '0 8 * * *'
  workflow_dispatch:  # Allows manual trigger

jobs:
  validate-real-sites:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install
      
    - name: Test PostHandler against real blog sites
      run: |
        echo "=== Testing PostHandler against real blog sites ==="
        poetry run python scripts/test/run_posts.py > post_validation_output.txt 2>&1
        if [ $? -ne 0 ]; then
          echo "PostHandler validation failed!"
          cat post_validation_output.txt
          exit 1
        fi
        echo "PostHandler validation passed!"
        
    - name: Test BlogChartHandler against real blog ranking sites
      run: |
        echo "=== Testing BlogChartHandler against real blog ranking sites ==="
        poetry run python scripts/test/run_blogchart.py > blogchart_validation_output.txt 2>&1
        if [ $? -ne 0 ]; then
          echo "BlogChartHandler validation failed!"
          cat blogchart_validation_output.txt
          exit 1
        fi
        echo "BlogChartHandler validation passed!"
        
    - name: Upload validation output on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: validation-output
        path: |
          post_validation_output.txt
          blogchart_validation_output.txt
        retention-days: 30
        
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let body = '## Daily Site Validation Failed\n\n';
          body += `**Date:** ${new Date().toISOString()}\n\n`;
          
          // Read output files if they exist
          try {
            if (fs.existsSync('post_validation_output.txt')) {
              const postOutput = fs.readFileSync('post_validation_output.txt', 'utf8');
              body += '### PostHandler Validation Output\n\n```\n' + postOutput.slice(-2000) + '\n```\n\n';
            }
          } catch (e) {
            body += '### PostHandler Validation\n\nFailed to read output file\n\n';
          }
          
          try {
            if (fs.existsSync('blogchart_validation_output.txt')) {
              const chartOutput = fs.readFileSync('blogchart_validation_output.txt', 'utf8');
              body += '### BlogChartHandler Validation Output\n\n```\n' + chartOutput.slice(-2000) + '\n```\n\n';
            }
          } catch (e) {
            body += '### BlogChartHandler Validation\n\nFailed to read output file\n\n';
          }
          
          body += 'Please check the validation artifacts for more details.';
          
          // Check if there's already an open issue for today
          const today = new Date().toISOString().split('T')[0];
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'validation-failure'
          });
          
          const todayIssue = existingIssues.data.find(issue => 
            issue.title.includes(today)
          );
          
          if (!todayIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Daily Site Validation Failed - ${today}`,
              body: body,
              labels: ['validation-failure', 'bug']
            });
          }